#!/system/bin/sh
# 2011-01-13 Firerat
# check /cache size and set dexopt-data-only if too 'small'

# setup busybox aliases
alias mount="busybox mount"
alias grep="busybox grep"
alias sed="busybox sed"
alias install="busybox install"
alias printf="busybox printf"
alias awk="busybox awk"
alias mv="busybox mv"
alias du="busybox du"
alias df="busybox df"

# 35mb in bytes
#TODO base this on estimate of generated dex
MinCacheSize=36700160

# get cache size ( bytes ) from /proc/mtd
CacheSizeBytes=$(printf %d `awk '/cache/ {print "0x"$2}' /proc/mtd`)
# we have assumed cache is either empty, or already has dex on it
mountsystem ()
{
opt=$1
if [ "`awk '$2 == "/system" {gsub(/,/," ,");print $4}' /proc/mounts`" != "$opt" ];
then
    mount -o ${opt},remount /system
fi
return
}
System_dex_loc () {
SetSystemDexLoc ()
{
# clean build.prop(s)
for prop in $(ls /system/*prop);do
    if [ "$(grep -q "dalvik.vm.dexopt-data-only" ${prop};echo $?)" = "0" ];
    then
        mountsystem rw
        sed '/dalvik.vm.dexopt-data-only/ d' -i ${prop}
    fi
mountsystem ro
setprop dalvik.vm.dexopt-data-only $1
done
# make sure dirs exist
for rootdir in data cache;do
    if [ ! -d "/${rootdir}/dalvik-cache" ];
    then
        install -m 771 -o 1000 -g 1000 -d /${rootdir}/dalvik-cache
    fi
done
return
}

TestCacheSize ()
{
if [ "$CacheSizeBytes" -lt "$MinCacheSize" ];
then
    echo "system dex to be kept on /data"
    SetSystemDexLoc 1
else
    echo "system dex to be kept on /cache"
    SetSystemDexLoc null
fi
return
}

TestCacheSize
# TODO add logcat spew
# TODO add in vendor/app dex
# if for instance gapps go to vendor, then their dex may fit cache
# will require additional code in frameworks/base
return
}

download_cache_loc () {
    # Script for setting download cache location, requires
    # https://github.com/Firerat/GB-framework_base/commit/40ca809a5dffebacb2b9dc7d466775cea30cbd49 
    # see commit notes for the reason for some of the logic in this script
# TODO as this makes 06BindCache redundent , delete it
avail ()
{
partition=`echo $1|sed s/[^a-zA-Z0-9]//g`
eval ${partition}_free=$(df |awk '$6 == "/'$1'" {printf $4}')
eval checkzero=\$${partition}_free
if [ "$checkzero" = "" ];
then
    eval ${partition}_free="0"
fi
}
for partition in sd-ext data cache;do
    avail $partition
done
#prioritise the sd-ext ( if avialable )
# only use data if cache is too small
minDLCache=`expr 50 \* 1024` # 50mb , max market d/l is currently 50mb
#TODO check is sysdex will be going to cache
if [ "$sdext_free" -gt "$cache_free" ];
then
    AltDownloadCache="/sd-ext/download"
elif [ "$cache_free" -lt "$minDLCache" -a "$data_free" -gt "`expr $cache_free \* 2`$" -o "$data_free" -gt "`expr $minDLCache \* 2`" ];
then
    AltDownloadCache="/data/download"
    # TODO Factor in the 10% 'reserve'
else
    AltDownloadCache=""
    setprop env.download_cache ""
    return
fi

setprop env.download_cache $AltDownloadCache

if [ ! -e "$AltDownloadCache" ];
then
    install -m 771 -o 1000 -g 2001 -d $AltDownloadCache
fi
return
}
System_dex_loc
download_cache_loc
